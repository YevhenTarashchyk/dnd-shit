{"version":3,"sources":["store/consts.js","store/state.js","store/reducers/reducers.js","store/index.js","components/Card/AddCard.js","components/Column/AddColumn.js","components/Card/Card.js","store/actions.js","containers/CardDropHolder.js","containers/Column.js","App.js","index.js"],"names":["columns","title","cards","history","createBrowserHistory","middlewares","thunk","routerMiddleware","store","createStore","state","initialState","type","payload","concat","length","id","uuid","push","description","columnId","updatedColumn","cloneDeep","find","createdAt","Date","now","map","col","dragIndex","hoverIndex","tmp","splice","lastColumnId","nextColumnId","cardId","lastColumn","column","nextColumn","elementPos","x","indexOf","removed","pop","lastCardPos","nextCardPos","columnIndex","findIndex","filter","card","State","composeWithDevTools","applyMiddleware","AddCard","isShown","handleCloseAddForm","setState","handleShowAddForm","handleDescription","e","target","value","handleAddCard","props","addCard","trim","handleKeyPress","key","placeholder","onChange","this","className","onKeyPress","onClick","Fab","size","color","aria-label","React","Component","defaultProps","add","undefined","AddColumn","columnName","showAddColumnForm","handleColumnName","event","handleAddColumn","addColumn","saveColumn","Card","handleRemoveCard","style","fontSize","toLocaleString","moveCard","CardColumnTarget","hover","monitor","component","item","getItem","draggedPosition","position","hoverPosition","hoverColumnId","hoverBoundingRect","findDOMNode","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","CardDropHolder","connectDropTarget","connectDragSource","isDragging","cn","connect","dispatch","actions","DragSource","itemTypes","beginDrag","dragSource","DropTarget","dropTarget","Column","removeCard","handleRemoveColumn","removeColumn","index","opacity","ListWithDnD","targetType","getItemType","hoverMiddleX","right","left","hoverClientX","changeColumnOrder","columnDraggedFrom","columnDraggedOn","draggedShit","moveOnEmpty","App","backend","HTML5Backend","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3fd9163c.chunk.js","sourcesContent":["export const ADD_COLUMN = \"ADD_COLUMN\";\nexport const ADD_CARD = \"ADD_CARD\";\n\nexport const REMOVE_CARD = \"REMOVE_CARD\";\nexport const REMOVE_COLUMN = \"REMOVE_COLUMN\";\n\nexport const SWAP_COLUMN = \"SWAP_COLUMN\";\nexport const MOVE_CARD = \"MOVE_CARD\";\nexport const MOVE_CARD_ON_EMPTY_COLUMN = \"MOVE_CARD_ON_EMPTY_COLUMN\";\n\nexport default {\n  COLUMN: \"COLUMN\",\n  CARD: \"CARD\"\n};\n","export default {\n  columns: [\n    {\n      title: \"\",\n      cards: []\n    }\n  ]\n};\n","import uuid from \"uuid/v4\";\nimport cloneDeep from \"lodash/cloneDeep\";\nimport {\n  ADD_COLUMN,\n  REMOVE_COLUMN,\n  ADD_CARD,\n  REMOVE_CARD,\n  SWAP_COLUMN,\n  MOVE_CARD,\n  MOVE_CARD_ON_EMPTY_COLUMN\n} from \"../consts\";\nimport initialState from \"../state\";\n\nexport default (state = initialState, { type, payload } = {}) => {\n  let columns = [].concat(state.columns);\n\n  switch (type) {\n    case ADD_COLUMN: {\n      columns[columns.length - 1] = {\n        id: uuid(),\n        title: payload,\n        cards: []\n      };\n      columns.push({\n        title: \"\",\n        cards: []\n      });\n      return {\n        ...state,\n        columns\n      };\n    }\n    case ADD_CARD: {\n      const { description, columnId } = payload;\n\n      const updatedColumn = cloneDeep(\n        state.columns.find(({ id }) => id === columnId)\n      );\n      if (!updatedColumn) return state;\n\n      updatedColumn.cards.push({\n        id: uuid(),\n        createdAt: Date.now(),\n        description: description\n      });\n      columns = state.columns.map(col => {\n        if (col.id === columnId) {\n          return updatedColumn;\n        }\n        return col;\n      });\n      return {\n        ...state,\n        columns\n      };\n    }\n\n    case SWAP_COLUMN: {\n      const { dragIndex, hoverIndex } = payload;\n      columns = cloneDeep(state.columns);\n      const tmp = columns[dragIndex];\n      columns.splice(dragIndex, 1);\n      columns.splice(hoverIndex, 0, tmp);\n      return {\n        ...state,\n        columns\n      };\n    }\n\n    case MOVE_CARD_ON_EMPTY_COLUMN: {\n      const { lastColumnId, nextColumnId, cardId } = payload;\n      if (lastColumnId === nextColumnId) return state;\n\n      columns = cloneDeep(state.columns);\n      const lastColumn = columns.find(column => {\n        return column.id === lastColumnId;\n      });\n\n      const nextColumn = columns.find(column => {\n        return column.id === nextColumnId;\n      });\n\n      const elementPos = lastColumn.cards.map(x => x.id).indexOf(cardId);\n      const removed = lastColumn.cards.splice(elementPos, 1).pop();\n      nextColumn.cards.push(removed);\n\n      return {\n        ...state,\n        columns\n      };\n    }\n\n    case MOVE_CARD: {\n      const { lastColumnId, lastCardPos, nextColumnId, nextCardPos } = payload;\n      columns = cloneDeep(state.columns);\n      const lastColumn = columns.find(column => {\n        return column.id === lastColumnId;\n      });\n\n      const nextColumn = columns.find(column => {\n        return column.id === nextColumnId;\n      });\n\n      if (lastColumnId === nextColumnId) {\n        lastColumn.cards.splice(\n          nextCardPos,\n          0,\n          lastColumn.cards.splice(lastCardPos, 1)[0]\n        );\n      } else {\n        nextColumn.cards.splice(nextCardPos, 0, lastColumn.cards[lastCardPos]);\n        lastColumn.cards.splice(lastCardPos, 1);\n      }\n\n      return {\n        ...state,\n        columns\n      };\n    }\n\n    case REMOVE_CARD: {\n      const { cardId, columnId } = payload;\n      if (!cardId) return;\n\n      const columnIndex = state.columns.findIndex(({ id }) => id === columnId);\n      const column = state.columns[columnIndex];\n\n      const updatedColumn = {\n        ...column,\n        cards: column.cards.filter(card => card.id !== cardId)\n      };\n      columns[columnIndex] = updatedColumn;\n\n      return {\n        ...state,\n        columns\n      };\n    }\n    case REMOVE_COLUMN: {\n      return {\n        ...state,\n        columns: state.columns.filter(column => column.id !== payload)\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n","import { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport { createBrowserHistory } from \"history\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport { routerMiddleware } from \"connected-react-router\";\n\nimport rootReducers from \"./reducers/reducers\";\nimport State from \"./state\";\n\nconst history = createBrowserHistory();\nconst middlewares = [thunk, routerMiddleware(history)];\nconst store = createStore(\n  rootReducers,\n  State,\n  composeWithDevTools(applyMiddleware(...middlewares))\n);\n\nexport default store;\n","import React from \"react\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Fab from \"@material-ui/core/Fab\";\n\nclass AddCard extends React.Component {\n  state = {\n    isShown: false,\n    description: \"\"\n  };\n\n  handleCloseAddForm = () => {\n    this.setState({\n      isShown: false,\n      description: \"\"\n    });\n  };\n\n  handleShowAddForm = () => {\n    this.setState({ isShown: true });\n  };\n\n  handleDescription = e => {\n    this.setState({ description: e.target.value });\n  };\n\n  handleAddCard = () => {\n    const { addCard, columnId } = this.props;\n    const { description } = this.state;\n    if (description.trim().length === 0) {\n      return false;\n    }\n    this.handleCloseAddForm();\n    addCard(description, columnId);\n  };\n  handleKeyPress = e => {\n    const { description } = this.state;\n    if (e.key === \"Enter\" && !!description) {\n      this.handleAddCard();\n    }\n  };\n  addCard() {\n    return (\n      <div>\n        <input\n          placeholder=\"Enter card description\"\n          onChange={this.handleDescription}\n          type=\"text\"\n          className=\"form-control\"\n          onKeyPress={this.handleKeyPress}\n        />\n        <div className=\"btn-group\">\n          <button onClick={this.handleAddCard} className=\"btn btn-success\">\n            Save\n          </button>\n          <button onClick={this.handleCloseAddForm} className=\"btn btn-success\">\n            Cancel\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.isShown ? (\n          this.addCard()\n        ) : (\n          <Fab\n            size=\"small\"\n            color=\"green\"\n            aria-label=\"add\"\n            onClick={this.handleShowAddForm}\n          >\n            <AddIcon />\n          </Fab>\n        )}\n      </div>\n    );\n  }\n}\n\nAddCard.defaultProps = {\n  add: undefined\n};\n\nexport default AddCard;\n","import React, { Component } from \"react\";\n\nclass AddColumn extends Component {\n  state = {\n    columnName: \"\",\n    showAddColumnForm: false\n  };\n\n  handleShowAddForm = () => {\n    this.setState({\n      showAddColumnForm: true\n    });\n  };\n\n  handleCloseAddForm = () => {\n    this.setState({\n      showAddColumnForm: false,\n      columnName: \"\"\n    });\n  };\n\n  handleColumnName = event => {\n    this.setState({\n      columnName: event.target.value\n    });\n  };\n\n  handleAddColumn = () => {\n    const { addColumn } = this.props;\n    const { columnName } = this.state;\n\n    if (columnName.trim().length === 0) {\n      return false;\n    }\n    addColumn(columnName);\n  };\n  handleKeyPress = e => {\n    const { columnName } = this.state;\n    if (e.key === \"Enter\" && !!columnName) {\n      this.handleAddColumn();\n    }\n  };\n  addColumn = () => {\n    return (\n      <div>\n        <input\n          placeholder=\"Enter column name\"\n          onChange={this.handleColumnName}\n          type=\"text\"\n          className=\"form-control\"\n          onKeyPress={this.handleKeyPress}\n        />\n        <div className=\"btn-group\">\n          <button onClick={this.handleAddColumn} className=\"btn btn-success\">\n            Save\n          </button>\n          <button onClick={this.handleCloseAddForm} className=\"btn btn-success\">\n            Cancel\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  render() {\n    const { showAddColumnForm } = this.state;\n    return (\n      <div className=\"addBox\">\n        {showAddColumnForm ? (\n          this.addColumn()\n        ) : (\n          <button className=\"btn btn-primary\" onClick={this.handleShowAddForm}>\n            Add a list\n          </button>\n        )}\n      </div>\n    );\n  }\n}\n\nAddColumn.defaultProps = {\n  saveColumn: undefined\n};\n\nexport default AddColumn;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./card-style.css\";\nconst Card = ({ handleRemoveCard, createdAt, description }) => {\n  return (\n    <div className=\"thumbnail\">\n      <div className=\"px-2 pt-2\">\n        <div className=\"col-lg-12 well well-add-card\">\n          <h6 className=\"m-0\">{description}</h6>\n        </div>\n        <div className=\"col-lg-12 text-dark\">\n          <p\n            style={{\n              fontSize: \"12px\"\n            }}\n          >\n            {new Date(createdAt).toLocaleString()}\n          </p>\n        </div>\n      </div>\n      <button\n        onClick={handleRemoveCard}\n        type=\"button\"\n        className=\"btn btn-primary btn-sm\"\n      >\n        Remove\n      </button>\n    </div>\n  );\n};\n\nCard.propTypes = {\n  createdAt: PropTypes.number.isRequired,\n\n  description: PropTypes.string.isRequired,\n  handleRemoveCard: PropTypes.func.isRequired\n};\nexport default Card;\n","import {\n  ADD_COLUMN,\n  ADD_CARD,\n  REMOVE_CARD,\n  REMOVE_COLUMN,\n  SWAP_COLUMN,\n  MOVE_CARD,\n  MOVE_CARD_ON_EMPTY_COLUMN\n} from \"./consts.js\";\n\nexport const addColumn = columnName => ({\n  type: ADD_COLUMN,\n  payload: columnName\n});\nexport const addCard = (description, columnId) => ({\n  type: ADD_CARD,\n  payload: { description, columnId }\n});\nexport const removeCard = (cardId, columnId) => ({\n  type: REMOVE_CARD,\n  payload: {\n    cardId,\n    columnId\n  }\n});\nexport const removeColumn = columnId => ({\n  type: REMOVE_COLUMN,\n  payload: columnId\n});\n\nexport const changeColumnOrder = (dragIndex, hoverIndex) => {\n  return {\n    type: SWAP_COLUMN,\n    payload: {\n      dragIndex,\n      hoverIndex\n    }\n  };\n};\n\nexport const moveCard = (\n  lastColumnId,\n  lastCardPos,\n  nextColumnId,\n  nextCardPos\n) => {\n  return {\n    type: MOVE_CARD,\n    payload: {\n      lastColumnId,\n      lastCardPos,\n      nextColumnId,\n      nextCardPos\n    }\n  };\n};\n\nexport const moveOnEmpty = (lastColumnId, nextColumnId, cardId) => {\n  return {\n    type: MOVE_CARD_ON_EMPTY_COLUMN,\n    payload: {\n      lastColumnId,\n      nextColumnId,\n      cardId\n    }\n  };\n};\n","import React, { Component } from \"react\";\nimport { DragSource, DropTarget } from \"react-dnd\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport { findDOMNode } from \"react-dom\";\nimport Card from \"../components/Card/Card\";\nimport * as actions from \"../store/actions\";\nimport cn from \"classnames\";\nimport itemTypes from \"../store/consts\";\n\nconst CardSource = {\n  beginDrag(props) {\n    return {\n      id: props.item.id,\n      columnId: props.columnId,\n      position: props.cardId\n    };\n  },\n  isDragging(props, monitor) {\n    return props.item.id === monitor.getItem().id;\n  }\n};\n\nfunction collect1(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  };\n}\n\n// перемещение карточек между колонками !!!\nconst CardColumnTarget = {\n  hover(props, monitor, component) {\n    const item = monitor.getItem();\n\n    const { columnId, cardId, moveCard } = props;\n\n    const draggedPosition = item.position;\n    const hoverPosition = cardId;\n    const hoverColumnId = columnId;\n    if (!component) return null;\n    const hoverBoundingRect = findDOMNode(component).getBoundingClientRect();\n    const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n    const clientOffset = monitor.getClientOffset();\n    const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n    if (draggedPosition < hoverPosition && hoverClientY < hoverMiddleY)\n      return null;\n    if (draggedPosition > hoverPosition && hoverClientY > hoverMiddleY)\n      return null;\n\n    if (item.id !== props.item.id) {\n      moveCard(item.columnId, item.position, columnId, cardId);\n    }\n    item.position = hoverPosition;\n    item.columnId = hoverColumnId;\n  }\n};\nfunction collect2(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget()\n  };\n}\n\nclass CardDropHolder extends Component {\n  render() {\n    const {\n      connectDropTarget,\n      connectDragSource,\n      item,\n      handleRemoveCard,\n      isDragging,\n      columnId,\n      cardId\n    } = this.props;\n    return connectDragSource(\n      connectDropTarget(\n        <div\n          className={cn(\"Card\", {\n            \"Card--dragging\": isDragging\n          })}\n        >\n          <Card\n            columnId={columnId}\n            createdAt={item.createdAt}\n            description={item.description}\n            id={cardId}\n            handleRemoveCard={handleRemoveCard}\n          />\n        </div>\n      )\n    );\n  }\n}\n\nCardDropHolder.propTypes = {\n  handleRemoveCard: PropTypes.func.isRequired,\n  item: PropTypes.object.isRequired,\n  currentPlaceholder: PropTypes.number\n};\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatchToProps = dispatch => ({\n  moveCard: (lastColumnId, lastCardPos, nextColumnId, nextCardPos) =>\n    dispatch(\n      actions.moveCard(lastColumnId, lastCardPos, nextColumnId, nextCardPos)\n    )\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(\n  DragSource(itemTypes.CARD, CardSource, collect1)(\n    DropTarget(itemTypes.CARD, CardColumnTarget, collect2)(CardDropHolder)\n  )\n);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport AddCard from \"../components/Card/AddCard\";\nimport AddColumn from \"../components/Column/AddColumn\";\nimport { DropTarget, DragSource } from \"react-dnd\";\nimport { findDOMNode } from \"react-dom\";\n\nimport CardDropHolder from \"../containers/CardDropHolder\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../store/actions\";\nimport itemTypes from \"../store/consts\";\n\nclass Column extends Component {\n  handleRemoveCard = cardId => () => {\n    const { removeCard, column: { id: columnId } = {} } = this.props;\n    removeCard(cardId, columnId);\n  };\n\n  handleRemoveColumn = () => {\n    const { removeColumn, column: { id } = {} } = this.props;\n    removeColumn(id);\n  };\n\n  render() {\n    const {\n      isDragging,\n      connectDropTarget,\n      connectDragSource,\n      addCard,\n      addColumn,\n      index,\n      column: { title, cards = [], id } = {}\n    } = this.props;\n    let opacity = isDragging ? 0.2 : 1;\n    return connectDropTarget(\n      connectDragSource(\n        <div className=\"col-sm-2 columnBox\" style={{ opacity }}>\n          {title && <h5 className=\"columnTitle\"> {title}</h5>}\n          <div className=\"row\">\n            {cards.map((item, cardId) => {\n              return (\n                <CardDropHolder\n                  columnId={id}\n                  cardId={cardId}\n                  columnIndex={index}\n                  item={item}\n                  handleRemoveCard={this.handleRemoveCard(item.id)}\n                  key={cardId}\n                />\n              );\n            })}\n            {this.props.column.title ? (\n              <>\n                <AddCard columnId={id} addCard={addCard} />\n                <button\n                  onClick={this.handleRemoveColumn}\n                  className=\"btn btn-danger btn-sm mt-2\"\n                >\n                  Remove this column\n                </button>\n              </>\n            ) : (\n              <AddColumn addColumn={addColumn} />\n            )}\n          </div>\n        </div>\n      )\n    );\n  }\n}\n\nconst ListWithDnD = DropTarget(\n  [itemTypes.COLUMN, itemTypes.CARD],\n  {\n    hover(props, monitor, component) {\n      const targetType = monitor.getItemType();\n\n      if (targetType === itemTypes.COLUMN) {\n        const item = monitor.getItem();\n        const dragIndex = item.index; //перетаскиваемая цель Index\n        const hoverIndex = props.index;\n\n        if (item.column.title === \"\" || props.column.title === \"\") {\n          return null;\n        }\n        if (!component) return null;\n        const hoverBoundingRect = findDOMNode(\n          component\n        ).getBoundingClientRect(); //границы карты\n        const hoverMiddleX =\n          (hoverBoundingRect.right - hoverBoundingRect.left) / 2; //Получить среднюю точку оси X\n        const clientOffset = monitor.getClientOffset(); //Получить смещение цели перетаскивания\n        const hoverClientX = clientOffset.x - hoverBoundingRect.left;\n        if (dragIndex < hoverIndex && hoverClientX < hoverMiddleX) {\n          return null;\n        }\n        if (dragIndex > hoverIndex && hoverClientX > hoverMiddleX) {\n          return null;\n        }\n        if (dragIndex !== hoverIndex) {\n          props.changeColumnOrder(dragIndex, hoverIndex);\n        }\n\n        item.index = hoverIndex;\n      }\n\n      if (targetType === itemTypes.CARD) {\n        const item = monitor.getItem();\n\n        const columnDraggedFrom = item.columnId;\n        const columnDraggedOn = props.column.id;\n        const draggedShit = item.id;\n\n        if (props.column.title !== \"\" && props.column.cards.length === 0) {\n          props.moveOnEmpty(columnDraggedFrom, columnDraggedOn, draggedShit);\n        }\n      }\n    }\n  },\n  connect => ({\n    connectDropTarget: connect.dropTarget()\n  })\n)(\n  DragSource(\n    itemTypes.COLUMN,\n    {\n      beginDrag(props) {\n        return {\n          index: props.index,\n          column: props.column\n        };\n      },\n      isDragging(props, monitor) {\n        return props.column.id === monitor.getItem().column.id;\n      }\n    },\n    (connect, monitor) => ({\n      connectDragSource: connect.dragSource(),\n      isDragging: monitor.isDragging()\n    })\n  )(Column)\n);\n\nColumn.propTypes = {\n  removeCard: PropTypes.func.isRequired,\n  removeColumn: PropTypes.func.isRequired,\n  addCard: PropTypes.func.isRequired,\n  addColumn: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatchToProps = dispatch => ({\n  removeCard: (cardId, columnId) =>\n    dispatch(actions.removeCard(cardId, columnId)),\n  removeColumn: columnId => dispatch(actions.removeColumn(columnId)),\n  addCard: (description, columnId) =>\n    dispatch(actions.addCard(description, columnId)),\n  addColumn: title => dispatch(actions.addColumn(title)),\n  moveOnEmpty: (lastColumnId, nextColumnId, cardId) =>\n    dispatch(actions.moveOnEmpty(lastColumnId, nextColumnId, cardId)),\n  moveCard: (lastColumnId, lastCardPos, nextColumnId, nextCardPos) =>\n    dispatch(\n      actions.moveCard(lastColumnId, lastCardPos, nextColumnId, nextCardPos)\n    ),\n  changeColumnOrder: (dragIndex, hoverIndex) =>\n    dispatch(actions.changeColumnOrder(dragIndex, hoverIndex))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ListWithDnD);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport Column from \"./containers/Column\";\nimport { DndProvider } from \"react-dnd\";\nimport HTML5Backend from \"react-dnd-html5-backend\";\n\nclass App extends Component {\n  render() {\n    const { columns } = this.props;\n    return (\n      <DndProvider backend={HTML5Backend}>\n        <div className=\"App\">\n          <div className=\"container-fluid\">\n            <div className=\"row taskContainer\">\n              {columns.map((column, index) => {\n                return <Column column={column} key={index} index={index} />;\n              })}\n            </div>\n          </div>\n        </div>\n      </DndProvider>\n    );\n  }\n}\nApp.propTypes = {\n  columns: PropTypes.array.isRequired,\n  cards: PropTypes.array.isRequired\n};\n\nApp.defaultProps = {\n  columns: [],\n  cards: []\n};\nconst mapStateToProps = state => {\n  return {\n    columns: state.columns\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  {}\n)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport history from \"./store/index\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App history={history} />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}